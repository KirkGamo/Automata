name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Use Node 20 to match some devDependencies that require newer Node versions
          node-version: '20'

      - name: Setup Node.js (server cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install & build server
        working-directory: server
        run: |
          npm ci
          # lint server sources - fail CI if lint errors
          npm run lint
          npm test
          npm run build

      - name: Start server (background)
        working-directory: server
        run: |
          # start the built server in background for E2E tests
          nohup npm start > server.log 2>&1 &

      - name: Diagnostics after server start
        working-directory: server
        run: |
          # short sleep to let process spawn
          sleep 1
          echo "--- process list (node/npm) ---"
          ps aux | egrep "node|npm" || true
          echo "--- list server/dist ---"
          ls -la dist || true
          echo "--- server.log (full) ---"
          cat server.log || true
          echo "--- curl health endpoint (verbose) ---"
          curl -v --max-time 5 http://localhost:4000/ || true
          echo "--- server PID and tail server.log ---"
          pid=$(ps aux | egrep "node .*dist/index.js" | egrep -v egrep | awk '{print $2}') || true
          echo "PID=$pid" || true
          if [ -n "$pid" ]; then
            echo "process $pid exists"; ps -fp $pid || true
            tail -n 200 server.log || true
          fi
          echo "--- server.log head ---"
          head -n 200 server.log || true
          echo "--- server.log tail ---"
          tail -n 200 server.log || true
          echo "--- node/npm versions ---"
          node --version || true; npm --version || true
          echo "--- listening TCP ports (ss) ---"
          ss -ltnp || netstat -ltnp || true

      - name: Wait for server to be ready (curl retry)
        working-directory: server
        run: |
          # retry curl against backend with controlled retries and clear logging
          max_attempts=24
          attempt=0
          until curl -sS http://localhost:4000/ -o /dev/null; do
            attempt=$((attempt+1))
            echo "backend not ready (attempt ${attempt}/${max_attempts})"
            if [ ${attempt} -ge ${max_attempts} ]; then
              echo "backend failed to start after ${max_attempts} attempts"
              echo "--- server.log (tail) ---"
              tail -n +1 server.log || true
              exit 1
            fi
            sleep 5
          done
          echo "backend ready"
          echo "--- server.log (tail) ---"
          tail -n +1 server.log || true

      - name: Setup Node.js (frontend cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install, typecheck & build frontend
        working-directory: frontend
        run: |
          # restore npm cache for frontend (handled by setup-node)
          npm ci
          # lint frontend sources - fail CI if lint errors
          npm run lint
          # run frontend tests
          npm test --silent
          # run TypeScript type check (no emit)
          npx tsc -p tsconfig.json --noEmit
          npm run build
          # start the dev server with explicit API base so it hits the backend directly in CI
          VITE_API_BASE=http://localhost:4000 nohup npm run dev -- --port 5173 > preview.log 2>&1 &
          # wait for frontend to be available using curl retry loop
          max_attempts=24
          attempt=0
          until curl -sS http://localhost:5173/ -o /dev/null; do
            attempt=$((attempt+1))
            echo "frontend not ready (attempt ${attempt}/${max_attempts})"
            if [ ${attempt} -ge ${max_attempts} ]; then
              echo "frontend failed to start after ${max_attempts} attempts"
              echo "--- preview.log (tail) ---"; tail -n +1 preview.log || true
              exit 1
            fi
            sleep 5
          done
          echo "frontend ready"
          # install playwright browsers and run E2E tests
          # Debug: print environment and check installed playwright packages to catch duplicates
          echo "--- Environment (selected vars) ---"
          env | sort | egrep "(HTTP|HTTPS|ALL_PROXY|NO_PROXY|VITE|PLAYWRIGHT|NODE)" || true
          echo "--- node/npm versions ---"
          node --version; npm --version
          echo "--- Check installed Playwright packages ---"
          npm ls @playwright/test playwright --long || true
          npx playwright install --with-deps
          # show last lines of preview and server logs for debugging
          echo "--- preview.log (tail) ---"; tail -n 200 preview.log || true
          echo "--- server.log (tail) ---"; tail -n 200 ../server/server.log || true
          # run Playwright tests via npm script to ensure resolution from package.json
          npm run e2e:ci
